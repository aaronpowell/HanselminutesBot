@page "/manage"
@using Azure.Storage.Queues
@using HanselminutesBot.ServiceDefaults
@using System.ServiceModel.Syndication
@using System.Xml
@inject IKernelMemory Memory
@inject QueueServiceClient QueueServiceClient
@rendermode InteractiveServer

<PageTitle>Manage</PageTitle>

<h1>Management</h1>

<div class="row">
    <div class="col">
        <h2>Episodes</h2>
        @if (!Episodes.Any())
        {
            <p>There are no loaded episodes.</p>
        }
        else
        {
            <table class="table">
                <thead>
                    <tr>
                        <th>Title</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var index in Episodes)
                    {
                        <tr>
                            <td>@index.Title</td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>

    <div class="col">
        <button @onclick="IndexDocuments">Trigger rebuild</button>
    </div>
</div>

@code {
    record PodcastItem(string Title, string Id);

    private List<PodcastItem> Episodes = [];

    protected override async Task OnInitializedAsync()
    {
        using var file = File.OpenRead("../HanselminutesBot.Loader/Data/hanselminutes.rss");
        var feed = SyndicationFeed.Load(XmlReader.Create(file));

        foreach (var item in feed.Items)
        {
            Episodes.Add(new PodcastItem(item.Title.Text, item.Id));
        }
    }

    private async Task IndexDocuments()
    {
        var queueClient = QueueServiceClient.GetQueueClient(ServiceConstants.QueueServiceName);

        await queueClient.CreateIfNotExistsAsync();

        await queueClient.SendMessageAsync("begin");
    }
}